generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model test2{
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  created_at DateTime? @default(now()) @db.Timestamp(6)
}

model User {
  id            String       @id @default(uuid())
  username      String
  email         String
  role          String
  createdAt     DateTime     @default(now())
  profiles      Profile[]
  messagesSent  Message[]    @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  bookings      Booking[]
  reviews       Review[]
  likes         Like[]
  follows       Follow[]     @relation("UserFollows")
  followings    Follow[]     @relation("UserFollowings")
}

model Profile {
  id             String    @id @default(uuid())
  userId         String
  firstName      String
  lastName       String
  profilePicture String
  bannerImage    String
  description    String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects       Project[]
  bookings       Booking[]
  reviews        Review[]
  likes          Like[]
}

model Project {
  id          String         @id @default(uuid())
  profileId   String
  title       String
  description String
  createdAt   DateTime       @default(now())
  profile     Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  images      ProjectImage[]
  portfolios  Portfolio[]
}

model ProjectImage {
  id        String     @id @default(uuid())
  projectId String
  imageUrl  String
  project   Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id           String     @id @default(uuid())
  projectId    String
  portfolioUrl String
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  content     String
  sentAt      DateTime @default(now())
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String   @id @default(uuid())
  userId     String
  profileId  String
  bookingDate DateTime
  status     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Review {
  id         String   @id @default(uuid())
  userId     String
  profileId  String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Like {
  id         String   @id @default(uuid())
  userId     String
  profileId  String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid())
  userId      String
  followingId String
  user        User     @relation("UserFollows", fields: [userId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}
